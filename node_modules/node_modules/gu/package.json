{
  "name": "gu",
  "description": "Streaming bot makers library with regex handlers",
  "author": {
    "name": "Eirik Albrigtsen",
    "email": "analsandblaster@gmail.com"
  },
  "version": "0.6.2",
  "repository": {
    "type": "git",
    "url": "git://github.com/clux/gu"
  },
  "keywords": [
    "bot",
    "duplex"
  ],
  "main": "gu.js",
  "scripts": {
    "test": "nodeunit --reporter=verbose test/*.js",
    "precoverage": "jscoverage gu.js",
    "coverage": "GU_COV=1 nodeunit --reporter=lcov test/*.js"
  },
  "dependencies": {
    "smell": "^2.0.2"
  },
  "devDependencies": {
    "jscoverage": "^0.5.9",
    "nodeunit": "^0.9.1",
    "sulfur": "^1.0.0"
  },
  "bugs": {
    "url": "http://github.com/clux/gu/issues"
  },
  "license": "MIT",
  "readme": "# gu\n[![npm status](http://img.shields.io/npm/v/gu.svg)](https://www.npmjs.org/package/gu)\n[![build status](https://secure.travis-ci.org/clux/gu.svg)](http://travis-ci.org/clux/gu)\n[![dependency status](https://david-dm.org/clux/gu.svg)](https://david-dm.org/clux/gu)\n[![coverage status](http://img.shields.io/coveralls/clux/gu.svg)](https://coveralls.io/r/clux/gu)\n\nGu is a streaming bot makers library that you can pipe your transports to and from.\n\nIt has two main features:\n\n- regular expression handlers in a style similar to [hubot](https://github.com/github/hubot) (but without all those annoying environment variables and coffee-script..)\n- streaming input and output allows for easy control, extensibility and transport-less testing of handlers\n\n## Usage\nFind a library that does the transport you want, say [irc-stream](https://npmjs.org/package/irc-stream):\n\nCreate a main file; `bot.js`:\n\n```javascript\nvar gu = require('gu')(scriptPath, files);\nvar ircStream = require('ircStream')(name, server, {chan: [chan]});\n\nircStream.pipe(gu).pipe(ircStream);\n```\n\nThe script path and the files (relative to the scriptpath) will be watched for changes, and is assumed to contain handlers exported behind a function.\n\n\nThen, put a file in your scriptpath, `love.js`, say, and add handlers therein:\n\n```javascript\nmodule.exports = function (gu) {\n  gu.handle(/^what is (\\w*)$/, function (say, match) {\n    if (match === 'love') {\n      say(\"baby don't hurt me\");\n    }\n  });\n};\n```\n\nThen fire up the bot with `node bot.js`, navigate to the specified server and channel (in `ircOpts`),\nand try saying `botName: what is love` in the channel.\n\nChanging the handler in `love.js` will result in different behaviour without having to restart `bot.js`.\n\nA more extensive example is avaiable in the [example directory](https://github.com/clux/gu/blob/master/example/).\n\n## Complete examples\nThe following bots are built on `gu`:\n\n- [cleverbot-irc](http://github.com/clux/cleverbot-irc)\n- [wolfram-irc](http://github.com/clux/wolfram-irc)\n- [curvefever-bot](http://github.com/clux/curvefever-bot)\n\n## Stream Specification\nA `gu` instance expects to have objects written to it, and will new objects readable on the other end.\n\nTherefore, the sensible interface (unless you are doing some weird asymmetrical connection setup), is a `Duplex` stream in [`objectMode`](http://nodejs.org/api/stream.html#stream_object_mode).\n\n### Inputs & Outputs\nExpected input objects:\n\n```js\n{\n  user: String, // unique identifier of user\n  channel: String, // unique group chat identifier (if relevant)\n  message: String, // raw message to be matched by gu\n}\n```\n\nOutput objects are identical. As an example an example message from/to `irc-stream` can look like this `{ user: 'clux', channel: '#quake', message: 'hi' }` for a private message, the `channel` key is unset.\n\nAn optional `name` property may be set for the convenience of the stream handler (such as `xmpp-stream`). It is used when doing group chat highlighting without having to necessarily use the larg UID. For IRC it is unused.\n\n## Compatible Transports\nBest tested: [irc-stream](https://github.com/clux/irc-stream).\n\nEarly prototype of [xmpp-stream](https://github.com/clux/xmpp-stream) also available.\n\n## Options\nA few options can be passed along to the `gu` instance as the third parameter, these are:\n\n```js\n{\n  verbose: Boolean // enable regex match log when gu receives messages\n}\n```\n\n### Logging\nEmitted logs are available on the instance as `gu.log`. They are emitted in the form of [smell](https://github.com/clux/smell).\n\nTo actually print them out, you should use [sulfur](https://github.com/clux/sulfur) as such:\n\n```js\nvar sulfur = require('sulfur');\nsulfur.absorb(gu.log, 'gu');\n```\n\nYou can also log from gu handlers by calling the log methods `error`, `warn`, or `info` on `gu.log`:\n\n```js\ngu.handle(/^(.*)$/, function (say, match) {\n  gu.log.info(\"matched the everything handler with\", match);\n});\n```\n\n## Installation\n\n```sh\n$ npm install gu\n```\n\n## License\nMIT-Licensed. See LICENSE file for details.\n",
  "readmeFilename": "README.md",
  "_id": "gu@0.6.2",
  "_from": "gu@^0.6.1"
}
