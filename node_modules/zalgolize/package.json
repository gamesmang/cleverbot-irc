{
  "name": "zalgolize",
  "description": "Uniform-clustered zalgolizer",
  "author": {
    "name": "Eirik Albrigtsen",
    "email": "analsandblaster@gmail.com"
  },
  "version": "1.2.4",
  "repository": {
    "type": "git",
    "url": "git://github.com/clux/zalgolize"
  },
  "keywords": [],
  "man": [
    "zalgolize.1"
  ],
  "main": "zalgo.js",
  "bin": {
    "zalgolize": "bin.js"
  },
  "scripts": {
    "test": "nodeunit --reporter=verbose test/*.js",
    "precoverage": "jscoverage zalgo.js",
    "coverage": "ZALGO_COV=1 nodeunit --reporter=lcov test/*.js",
    "man": "marked-man manpage.md -o zalgolize.1"
  },
  "dependencies": {
    "minimist": "^1.2.0",
    "trials": "^1.0.0"
  },
  "devDependencies": {
    "jscoverage": "^0.5.9",
    "nodeunit": "^0.9.1",
    "subset": "^0.1.6"
  },
  "bugs": {
    "url": "http://github.com/clux/zalgolize/issues"
  },
  "license": "MIT",
  "readme": "# Zalgolize\n[![npm status](http://img.shields.io/npm/v/zalgolize.svg)](https://www.npmjs.org/package/zalgolize)\n[![build status](https://secure.travis-ci.org/clux/zalgolize.svg)](http://travis-ci.org/clux/zalgolize)\n[![dependency status](https://david-dm.org/clux/zalgolize.svg)](https://david-dm.org/clux/zalgolize)\n[![coverage status](http://img.shields.io/coveralls/clux/zalgolize.svg)](https://coveralls.io/r/clux/zalgolize)\n\n[H̸̡̪̯ͨ͊̽̅̾̎Ȩ̬̩̾͛ͪ̈́̀́͘ ̶̧̨̱̹̭̯ͧ̾ͬC̷̙̲̝͖ͭ̏ͥͮ͟Oͮ͏̮̪̝͍M̲̖͊̒ͪͩͬ̚̚͜Ȇ̴̟̟͙̞ͩ͌͝S̨̥̫͎̭ͯ̿̔̀ͅ](http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454).\n\nThis is a uniform-clustered zalgolizer. It picks up to a specified number of symbols from each [subarray of souls](https://github.com/clux/zalgolize/blob/master/zalgo.js#L3-L21) at uniform randomness (with probability `p`), or picks from it no symbols at all (with probability `1-p`).\n\nThe probability lets you specify how clustered you want the symbols (`p=1` ⇒ completely uniform distribution, `p=0.5` ⇒ on average half the letters get nothing, the rest are uniformly distributed)\n\nThe different soul types contain symbols that go above, in the middle of, or underneath the text respectively.\n\nSome examples\n\n```js\nvar zalgo = require('zalgolize');\nzalgo('default zalgolization'); // p=.2, maxPicks = [5, 3, 5]\n'd̠̤̟̰efauḻt z͂̈al̊̚g͈oli̷za̪͉t̽̅i̘̪̫̼on'\n\nzalgo('less clustered zalgolization', 0.7, [2, 1, 2]);\n'l̠̇es̞̏s ̌cl̟usṯer͑eͦd ̲z̮̅aḻ̽g̞o̮l͉̉iza̐t̄iͅỏ͖n͖'\n\nzalgo('intense, clustered zalgolization', 0.2, [10, 5, 10])\n'i̛̩͖̤̯̮͠ͅn̷͟t͢en̝͎͇͙̭sͧͤͨ̓͗̾e͑̐ͫ̒ͨ̓ͮ̏̑, c̓lů͚̺̦̰̪͓͐ͯ̈ster͍̤͖͗͌̇ͨͦͥ̚é͜d̨̡͘͞ za̋ͬͫlgͧ̏ͧ̃ͫͭͯ̈̆ol̲͕̳͓͍̯̠i̢͢z̙ation͡'\n```\n\nA windows command line is impenetrable by zalgo and will display question marks instead.\n\nFinally, if you would like to sanitize / attempt to exorcise such a string, you can take the difference with the characters available via the exported `souls` function. Note, due to quirk with handling these characters in javascript, this may prove very difficult.\n\n## CLI\nSimple command line usage is available if you globally install the module:\n\n```sh\nzalgolize we are in the beam\nw̫̠ȇͭ̆̒͛ are ̷̨̰̃̆͐̾̅i͐̅̓n ̨͡the̪ͥ̍͑ ͫ̑̄b̫̲̙͕eam\n```\n\n```sh\ncat README | zalgolize\n```\n\n```sh\ncowsay -f sodomized-sheep $(lsb_release -ds) | zalgolize -p 0.1 | lolcat\n```\n\nMore information is available on the [man page](./manpage.md).\n\n## License\nMIT-Licensed. See LICENSE file for details.\n",
  "readmeFilename": "README.md",
  "_id": "zalgolize@1.2.4",
  "_from": "zalgolize@^1.0.0"
}
