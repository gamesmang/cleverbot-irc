{
  "name": "trials",
  "description": "Statistical trials to generate simple outcomes",
  "author": {
    "name": "Eirik Albrigtsen",
    "email": "analsandblaster@gmail.com"
  },
  "version": "1.0.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/clux/trials"
  },
  "keywords": [
    "probability",
    "bernoulli",
    "binomial"
  ],
  "main": "trials.js",
  "scripts": {
    "test": "nodeunit --reporter=verbose test/*.js",
    "coverage": "jscoverage trials.js && TRIALS_COV=1 nodeunit --reporter=lcov test"
  },
  "dependencies": {},
  "devDependencies": {
    "nodeunit": "~0.9.0",
    "jscoverage": "~0.5.4",
    "operators": "latest"
  },
  "bugs": {
    "url": "http://github.com/clux/trials/issues"
  },
  "license": "MIT",
  "readme": "# Trials\n[![npm status](http://img.shields.io/npm/v/trials.svg)](https://www.npmjs.org/package/trials)\n[![build status](https://secure.travis-ci.org/clux/trials.svg)](http://travis-ci.org/clux/trials)\n[![dependency status](https://david-dm.org/clux/trials.svg)](https://david-dm.org/clux/trials)\n[![coverage status](http://img.shields.io/coveralls/clux/trials.svg)](https://coveralls.io/r/clux/trials)\n\nTrials is a small library for generating outcomes conforming to simple statistical rules by running repeated trials in these systems.\n\nIt can pick from a probability mass function (pmf), do repeated Bernoulli trials for elements in an array, unique Bernoulli trials for every element of an object of `key` : `probability` form and more.\n\n## Usage\nRequire and call one of the functions within.\n\n```js\nvar t = require('trials');\nfor (var i = 0; i < 10; i += 1) {\n  // collect results of 10 trials where we pick exactly one of the object below\n  t.singlePmf({\n    attack: 0.6,\n    runaway: 0.3,\n    eatlunch: 0.1\n  };\n}\n```\nOutputs something like this:\n\n```bash\nrunaway\nattack\nattack\neatlunch\nattack\nattack\nrunaway\neatlunch\nattack\nattack\n```\n\nResults vary based on rolls - this one had more lunches than an average roll.\n\n## API\n### singlePmf(obj)\nTakes an object of form `key` : `probability` (which acts as the probability mass function for all the keys in the object) and picks exactly one element according the a roll mapped to the mass function. The introduction above has an example of this.\n\nAn important thing to note with this function is that the values of the object **must sum to 1** for it to represent a proper mass function (and to guarantee a return value).\n\n### single(ary)\nTakes an Array and picks exactly one element from the array with uniform probability.\n\n```js\nfor (var i = 0; i < 5; i += 1) t.single(['hi', 'thar', 'miss']);\n```\n\nExample output:\n\n```bash\nhi\nmiss\nthar\nmiss\nthar\n```\n\n### multipleProbs(obj)\nTakes an object of individual probabilities, does one Bernoulli trial for each element of the object with the respective probabilities and collects all the keys of the successes.\n\n```js\nfor (var i = 0; i < 5; i += 1) {\n  t.multipleProbs({\n    a: 0.4,\n    b: 0.4,\n    c: 0.1\n  });\n}\n```\n\nExample output:\n\n```bash\n[ 'b' ]\n[ 'a', 'b' ]\n[ 'b' ]\n[]\n[ 'a', 'b' ]\n```\n\n### multiple(ary, p)\nTakes an array and a fixed probability, does one Bernoulli trial for each element in the array with the defined uniform probability, and collects all the successes.\n\n```js\nfor (var i = 0; i < 5; i += 1) t.multiple(['a', 'b', 'c'], 0.4);\n```\n\nExample output:\n\n```bash\n[ 'a' ]\n[ 'a', 'b', 'c' ]\n[]\n[ 'b', 'c' ]\n[ 'b' ]\n```\n\nBy virtue of being repeated, independent Bernoulli trials with constant probability; the number of picks from the array follows a Binomial distribution `B(ary.length, p)`.\n\n### range(start, end)\nGets an integer in the range `start` to (and including) `end` with uniform probability.\nEquivalent to `single` on the array `[start, start+1, ... , end]`, but more efficient.\n\n### cluster(ary, max, p)\nCluster picks {1, 2, ..., max} elements uniformly from the array with probability `p`, or it picks none at all with probability `1-p`.\n\nThis is essentially a uniform distribution within a uniform distribution. It's uniform in that we either pick or don't pick with probability `p`, and if we pick, then how many we pick is uniformly distributed in the defined range. This creates the clusters, rather than true randomness.\n\n```js\nfor (var i = 0; i < 5; i += 1) t.cluster([1, 2, 3, 4, 5], 3, 0.6);\n```\n\nExample output:\n\n```bash\n[ 2, 1 ]\n[ 4, 1, 5 ]\n[ 1 ]\n[]\n[ 3, 1, 4 ]\n[ 2 ]\n```\n\n## Installation\n\n```bash\n$ npm install trials\n```\n\n## License\nMIT-Licensed. See LICENSE file for details.\n",
  "readmeFilename": "README.md",
  "_id": "trials@1.0.0",
  "_from": "trials@^1.0.0"
}
